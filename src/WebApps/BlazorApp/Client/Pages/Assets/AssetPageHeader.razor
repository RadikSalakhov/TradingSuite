@using BlazorApp.Client.Entities;
@using BlazorApp.Client.Services;
@using BlazorApp.Client.Abstraction;

@implements IDisposable

@inject IClientCacheService ClientCache

<div class="ts-container">
    <div class="ts-item-asset-name">
        @Asset.BaseAsset
    </div>
    <div class="ts-item-asset-price">
        @Asset.GetPriceString()
    </div>    
</div>

@code {
    [Parameter]
    public string BaseAsset { get; set; } = string.Empty;

    private string AssetType => "CRYPTO";

    private AssetEntity Asset => ClientCache.Asset.GetByKeys(AssetType, BaseAsset) ?? new AssetEntity(AssetType, BaseAsset);

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClientCache.Asset.Updated += assetPrice_Updated;

    }

    public void Dispose()
    {
        ClientCache.Asset.Updated -= assetPrice_Updated;
    }

    private async Task assetPrice_Updated(AssetEntity? assetEntity)
    {
        if (assetEntity == null || (assetEntity.AssetType == AssetType && assetEntity.BaseAsset == BaseAsset))
            await InvokeAsync(StateHasChanged);
    }
}