@using BlazorApp.Client.Entities;
@using BlazorApp.Client.Services;
@using BlazorApp.Client.Abstraction;

@implements IDisposable

@inject IClientCacheService ClientCache

<div class="ts-container">
    @*slope-short*@
    <div class="ts-item ts-item-slope-short-a" style="@getParameters(SlopeShortA)">@getPromilleStr(SlopeShortA)</div>
    <div class="ts-item ts-item-slope-short-b" style="@getParameters(SlopeShortB)">@getPromilleStr(SlopeShortB)</div>
    <div class="ts-item ts-item-slope-short-c" style="@getParameters(SlopeShortC)">@getPromilleStr(SlopeShortC)</div>
    <div class="ts-item ts-item-slope-short-d" style="@getParameters(SlopeShortD)">@getPromilleStr(SlopeShortD)</div>
    <div class="ts-item ts-item-slope-short-e" style="@getParameters(SlopeShortE)">@getPromilleStr(SlopeShortE)</div>
    <div class="ts-item ts-item-slope-short-f" style="@getParameters(SlopeShortF)">@getPromilleStr(SlopeShortF)</div>
    @*slope-long*@
    <div class="ts-item ts-item-slope-long-a" style="@getParameters(SlopeLongA)">@getPromilleStr(SlopeLongA)</div>
    <div class="ts-item ts-item-slope-long-b" style="@getParameters(SlopeLongB)">@getPromilleStr(SlopeLongB)</div>
    <div class="ts-item ts-item-slope-long-c" style="@getParameters(SlopeLongC)">@getPromilleStr(SlopeLongC)</div>
    <div class="ts-item ts-item-slope-long-d" style="@getParameters(SlopeLongD)">@getPromilleStr(SlopeLongD)</div>
    <div class="ts-item ts-item-slope-long-e" style="@getParameters(SlopeLongE)">@getPromilleStr(SlopeLongE)</div>
    <div class="ts-item ts-item-slope-long-f" style="@getParameters(SlopeLongF)">@getPromilleStr(SlopeLongF)</div>
    @*cross-diff*@
    <div class="ts-item ts-item-cross-diff-a" style="@getParameters(CrossDiffA)">@getPromilleStr(CrossDiffA)</div>
    <div class="ts-item ts-item-cross-diff-b" style="@getParameters(CrossDiffB)">@getPromilleStr(CrossDiffB)</div>
    <div class="ts-item ts-item-cross-diff-c" style="@getParameters(CrossDiffC)">@getPromilleStr(CrossDiffC)</div>
    <div class="ts-item ts-item-cross-diff-d" style="@getParameters(CrossDiffD)">@getPromilleStr(CrossDiffD)</div>
    <div class="ts-item ts-item-cross-diff-e" style="@getParameters(CrossDiffE)">@getPromilleStr(CrossDiffE)</div>
    <div class="ts-item ts-item-cross-diff-f" style="@getParameters(CrossDiffF)">@getPromilleStr(CrossDiffF)</div>
    @*price-short-diff*@
    <div class="ts-item ts-item-price-short-diff-a" style="@getParameters(PriceShortDiffA)">@getPromilleStr(PriceShortDiffA)</div>
    <div class="ts-item ts-item-price-short-diff-b" style="@getParameters(PriceShortDiffB)">@getPromilleStr(PriceShortDiffB)</div>
    <div class="ts-item ts-item-price-short-diff-c" style="@getParameters(PriceShortDiffC)">@getPromilleStr(PriceShortDiffC)</div>
    <div class="ts-item ts-item-price-short-diff-d" style="@getParameters(PriceShortDiffD)">@getPromilleStr(PriceShortDiffD)</div>
    <div class="ts-item ts-item-price-short-diff-e" style="@getParameters(PriceShortDiffE)">@getPromilleStr(PriceShortDiffE)</div>
    <div class="ts-item ts-item-price-short-diff-f" style="@getParameters(PriceShortDiffF)">@getPromilleStr(PriceShortDiffF)</div>
    @*price-long-diff*@
    <div class="ts-item ts-item-price-long-diff-a" style="@getParameters(PriceLongDiffA)">@getPromilleStr(PriceLongDiffA)</div>
    <div class="ts-item ts-item-price-long-diff-b" style="@getParameters(PriceLongDiffB)">@getPromilleStr(PriceLongDiffB)</div>
    <div class="ts-item ts-item-price-long-diff-c" style="@getParameters(PriceLongDiffC)">@getPromilleStr(PriceLongDiffC)</div>
    <div class="ts-item ts-item-price-long-diff-d" style="@getParameters(PriceLongDiffD)">@getPromilleStr(PriceLongDiffD)</div>
    <div class="ts-item ts-item-price-long-diff-e" style="@getParameters(PriceLongDiffE)">@getPromilleStr(PriceLongDiffE)</div>
    <div class="ts-item ts-item-price-long-diff-f" style="@getParameters(PriceLongDiffF)">@getPromilleStr(PriceLongDiffF)</div>
</div>

@code {
    [Parameter]
    public string BaseAsset { get; set; } = string.Empty;

    private string AssetType => "CRYPTO";

    private AssetEntity Asset => ClientCache.Asset.GetAssetWithInitialization(AssetType, BaseAsset) ?? new AssetEntity(AssetType, BaseAsset);

    private decimal AssetPrice => Asset.PriceUSDT;

    private EmaCrossEntity? EmaCrossA => Asset.GetEmaCrossEntity("1s");
    private EmaCrossEntity? EmaCrossB => Asset.GetEmaCrossEntity("1m");
    private EmaCrossEntity? EmaCrossC => Asset.GetEmaCrossEntity("5m");
    private EmaCrossEntity? EmaCrossD => Asset.GetEmaCrossEntity("15m");
    private EmaCrossEntity? EmaCrossE => Asset.GetEmaCrossEntity("30m");
    private EmaCrossEntity? EmaCrossF => Asset.GetEmaCrossEntity("1h");

    private decimal SlopeShortA => EmaCrossA?.GetSlopeShortCoeff() ?? 0m;
    private decimal SlopeShortB => EmaCrossB?.GetSlopeShortCoeff() ?? 0m;
    private decimal SlopeShortC => EmaCrossC?.GetSlopeShortCoeff() ?? 0m;
    private decimal SlopeShortD => EmaCrossD?.GetSlopeShortCoeff() ?? 0m;
    private decimal SlopeShortE => EmaCrossE?.GetSlopeShortCoeff() ?? 0m;
    private decimal SlopeShortF => EmaCrossF?.GetSlopeShortCoeff() ?? 0m;

    private decimal SlopeLongA => EmaCrossA?.GetSlopeLongCoeff() ?? 0m;
    private decimal SlopeLongB => EmaCrossB?.GetSlopeLongCoeff() ?? 0m;
    private decimal SlopeLongC => EmaCrossC?.GetSlopeLongCoeff() ?? 0m;
    private decimal SlopeLongD => EmaCrossD?.GetSlopeLongCoeff() ?? 0m;
    private decimal SlopeLongE => EmaCrossE?.GetSlopeLongCoeff() ?? 0m;
    private decimal SlopeLongF => EmaCrossF?.GetSlopeLongCoeff() ?? 0m;

    private decimal CrossDiffA => EmaCrossA?.GetCrossDiffCoeff(AssetPrice) ?? 0m;
    private decimal CrossDiffB => EmaCrossB?.GetCrossDiffCoeff(AssetPrice) ?? 0m;
    private decimal CrossDiffC => EmaCrossC?.GetCrossDiffCoeff(AssetPrice) ?? 0m;
    private decimal CrossDiffD => EmaCrossD?.GetCrossDiffCoeff(AssetPrice) ?? 0m;
    private decimal CrossDiffE => EmaCrossE?.GetCrossDiffCoeff(AssetPrice) ?? 0m;
    private decimal CrossDiffF => EmaCrossF?.GetCrossDiffCoeff(AssetPrice) ?? 0m;
    
    private decimal PriceShortDiffA => EmaCrossA?.GetPriceShortDiffCoeff(AssetPrice) ?? 0m;
    private decimal PriceShortDiffB => EmaCrossB?.GetPriceShortDiffCoeff(AssetPrice) ?? 0m;
    private decimal PriceShortDiffC => EmaCrossC?.GetPriceShortDiffCoeff(AssetPrice) ?? 0m;
    private decimal PriceShortDiffD => EmaCrossD?.GetPriceShortDiffCoeff(AssetPrice) ?? 0m;
    private decimal PriceShortDiffE => EmaCrossE?.GetPriceShortDiffCoeff(AssetPrice) ?? 0m;
    private decimal PriceShortDiffF => EmaCrossF?.GetPriceShortDiffCoeff(AssetPrice) ?? 0m;

    private decimal PriceLongDiffA => EmaCrossA?.GetPriceLongDiffCoeff(AssetPrice) ?? 0m;
    private decimal PriceLongDiffB => EmaCrossB?.GetPriceLongDiffCoeff(AssetPrice) ?? 0m;
    private decimal PriceLongDiffC => EmaCrossC?.GetPriceLongDiffCoeff(AssetPrice) ?? 0m;
    private decimal PriceLongDiffD => EmaCrossD?.GetPriceLongDiffCoeff(AssetPrice) ?? 0m;
    private decimal PriceLongDiffE => EmaCrossE?.GetPriceLongDiffCoeff(AssetPrice) ?? 0m;
    private decimal PriceLongDiffF => EmaCrossF?.GetPriceLongDiffCoeff(AssetPrice) ?? 0m;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClientCache.Asset.Updated += asset_Updated;

    }

    public void Dispose()
    {
        ClientCache.Asset.Updated -= asset_Updated;
    }

    private async Task asset_Updated(AssetEntity? assetEntity)
    {
        if (assetEntity == null || (assetEntity.AssetType == AssetType && assetEntity.BaseAsset == BaseAsset))
            await InvokeAsync(StateHasChanged);
    }

    private string getPromilleStr(decimal coeff)
    {
        //if (GlobalClientSettings.ShortViewEnabled)
            //return string.Empty;

        return (coeff * 1000).ToString("+0.000;-0.000");
    }

    private string getParameters(decimal value)
    {
        return value > 0
            ? "--background-color:seagreen;"
            : "--background-color:indianred;";
    }
}