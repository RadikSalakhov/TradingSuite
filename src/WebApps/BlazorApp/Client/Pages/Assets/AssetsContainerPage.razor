@using BlazorApp.Client.DTO;
@using BlazorApp.Client.Entities;
@using BlazorApp.Client.Services;

@implements IDisposable

@inject IClientCacheService ClientCache

<div class="ts-container" style="@ContainerStyleTemplate">
    @{
        var curRow = 1;
        var curColumn = 1;

        foreach (var asset in AssetPrices)
        {
            var itemStyle = string.Format(ItemStyleTemplate, curColumn, curColumn + 1, curRow, curRow + 1, RowHeight);

            <div class="ts-item" style="@itemStyle">
                <AssetPage AssetId=@asset.AssetId />
            </div>

            curColumn++;
            if (curColumn > ColumnsAmount)
            {
                curColumn = 1;
                curRow++;
            }
        }
    }
    
</div>

@code{
    private IEnumerable<AssetPriceEntity> AssetPrices => ClientCache.AssetPrice.GetList();

    private int ColumnsAmount => 6;

    private int RowsAmount => (int)Math.Ceiling(ClientCache.AssetPrice.GetCount() / (decimal)ColumnsAmount);

    private int RowHeight => 150;

    private string ContainerStyleTemplate => $"--grid-template-columns:{string.Join(" ", Enumerable.Repeat("1fr", ColumnsAmount))};--grid-template-rows:{string.Join(" ", Enumerable.Repeat("1fr", RowsAmount))};";

    private string ItemStyleTemplate => "--grid-column-start:{0};--grid-column-end:{1};--grid-row-start:{2};--grid-row-end:{3};--height:{4}px";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClientCache.AssetPrice.Updated += assetPrice_Updated;

    }

    public void Dispose()
    {
        ClientCache.AssetPrice.Updated -= assetPrice_Updated;
    }

    private async Task assetPrice_Updated(AssetPriceEntity? assetPrice)
    {
        await InvokeAsync(StateHasChanged);
    }
}