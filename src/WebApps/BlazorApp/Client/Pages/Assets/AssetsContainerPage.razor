@using BlazorApp.Client.DTO;
@using BlazorApp.Client.Entities;
@using BlazorApp.Client.Services;
@using BlazorApp.Client.Abstraction;
@using System.Drawing;

@implements IDisposable

@inject IClientCacheService ClientCache
@inject IClientSettingsService ClientSettings

<div style="overflow-y:auto;height:@HeightStr;">
    <div class="ts-container" style="@ContainerStyleTemplate">
        @{
            var curRow = 1;
            var curColumn = 1;

            foreach (var asset in AssetPrices)
            {
                var itemStyle = string.Format(ItemStyleTemplate, curColumn, curColumn + 1, curRow, curRow + 1, RowHeight);

                <div class="ts-item" style="@itemStyle">
                    <AssetPage BaseAsset=@asset.BaseAsset />
                </div>

                curColumn++;
                if (curColumn > ColumnsAmount)
                {
                    curColumn = 1;
                    curRow++;
                }
            }
        }    
    </div>
</div>

@code{
    private IEnumerable<AssetPriceEntity> AssetPrices => ClientCache.AssetPrice.GetList().OrderBy(v => v.BaseAsset);

    private string HeightStr => $"{ClientSettings.WindowSize.ClientAreaHeight}px";

    private int ColumnsAmount => ClientSettings.WindowSize.GetVisibleColumnsAmount();

    private int RowsAmount => ClientSettings.WindowSize.GetVisibleRowsAmount();

    private int RowHeight => ClientSettings.WindowSize.GetRowHeight();

    private string ContainerStyleTemplate => $"--grid-template-columns:{string.Join(" ", Enumerable.Repeat("1fr", ColumnsAmount))};--grid-template-rows:{string.Join(" ", Enumerable.Repeat("1fr", RowsAmount))};";

    private string ItemStyleTemplate => "--grid-column-start:{0};--grid-column-end:{1};--grid-row-start:{2};--grid-row-end:{3};--height:{4}px";    

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClientSettings.WindowSize.Updated += clientSettings_WindowSizeUpdated;

        ClientCache.AssetPrice.Updated += assetPrice_Updated;
    }

    public void Dispose()
    {
        ClientSettings.WindowSize.Updated -= clientSettings_WindowSizeUpdated;

        ClientCache.AssetPrice.Updated -= assetPrice_Updated;
    }

    private async Task clientSettings_WindowSizeUpdated()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task assetPrice_Updated(AssetPriceEntity? assetPrice)
    {
        await InvokeAsync(StateHasChanged);
    }
}